generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Student {
  id           Int           @id @default(autoincrement())
  name         String        @default("")
  email        String        @default("")
  password     String        @default("")
  applications Application[]
}

model Post {
  id           Int          @id @default(autoincrement())
  recruiterID  Int         
  recruiter    Recruiter    @relation(fields: [recruiterID], references: [id])        
  name         String
  status       String
  description  String
  rating1Text  String        @default("Just Mentioning")
  rating2Text  String        @default("Minimal Evidence")
  rating3Text  String        @default("Decent Evidence")
  rating4Text  String        @default("Excellent Evidence")
  rating5Text  String        @default("Perfect Match")
  deadline     DateTime      @default(now())
  applications Application[]
  requirements Requirement[]
}

model Application {
  postID      Int
  studentID   Int
  cv          String?
  accepted    Boolean    @default(false)
  rejected    Boolean    @default(false)
  submitted   Boolean    @default(false)
  extractedCV String     @default("")
  post        Post       @relation(fields: [postID], references: [id])
  student     Student    @relation(fields: [studentID], references: [id])
  evidences   Evidence[]
  interview   Interview?
  stages      Stage[]

  @@id([postID, studentID])
}

model Requirement {
  postID          Int
  id              Int        @default(autoincrement())
  requirementText String
  evidences       Evidence[]
  post            Post       @relation(fields: [postID], references: [id])

  @@id([postID, id])
}

model Stage {
  postID    Int
  studentID Int
  id        Int         @default(autoincrement())
  stageText String
  date      DateTime?
  completed Boolean     @default(false)
  app       Application @relation(fields: [postID, studentID], references: [postID, studentID])

  @@id([postID, studentID, id])
}

model Evidence {
  postID        Int
  rating        Int?        @default(0)
  evidenceText  String      @default("")
  requirementID Int
  studentID     Int
  notes         String      @default("")
  requirement   Requirement @relation(fields: [postID, requirementID], references: [postID, id])
  app           Application @relation(fields: [postID, studentID], references: [postID, studentID])

  @@id([postID, requirementID, studentID])
}

model Interview {
  postID      Int
  studentID   Int
  location    String      @default("")
  description String      @default("")
  date        DateTime
  completed   Boolean     @default(false)
  app         Application @relation(fields: [postID, studentID], references: [postID, studentID])

  @@id([postID, studentID])
}

model Recruiter {
  id           Int           @id @default(autoincrement())
  name         String        @default("")
  email        String        @default("")
  password     String        @default("")
  posts Post[]
}